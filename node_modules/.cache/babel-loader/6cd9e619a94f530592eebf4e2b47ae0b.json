{"ast":null,"code":"var _jsxFileName = \"/Users/Bec/Coding/Bliss-Application/src/Views/Home/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { health as healthCheck } from \"../../Services/api\";\nimport { list as listQuestions } from \"../../Services/api\";\nimport Question from \"../../Components/Single\";\n\nclass Home extends Component {\n  constructor() {\n    super();\n    this.state = {\n      serverChecking: true,\n      serverHealthy: false,\n      questions: [],\n      question: [],\n      search: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    const search = this.props.location.search.split(\"\").slice(1).join(\"\");\n    this.setState({\n      search: search\n    });\n\n    try {\n      const health = await healthCheck();\n\n      if (health.status === \"OK\") {\n        const list = await listQuestions(this.state.search);\n        const listKeysAdded = list.map(val => {\n          val.key = val.id;\n          return val;\n        });\n        this.setState({\n          serverChecking: false,\n          serverHealthy: true,\n          questions: listKeysAdded\n        });\n      } else {\n        this.setState({\n          serverChecking: false\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      console.log(\"Error in service.\");\n    }\n  }\n\n  render() {\n    console.log(this.state.serverChecking);\n    console.log(this.state.serverHealthy);\n    console.log(\"Questions\", this.state.questions);\n    const questions = this.state.questions;\n    console.log(\"search\", this.state.search);\n    const ans = this.state.search.split(\"=\");\n    const route = !ans[1] ? \"main\" : ans[1];\n    console.log(\"route\", ans, route);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"list\"), this.state.serverChecking && React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Checking Server Health\"), this.state.serverHealthy && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, questions.map(val => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: val.thumb_url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, val.id, \". \", val.question), React.createElement(\"button\", {\n        onClick: this.updateSearch(val),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: `/questions?question_id=${val.id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"See details\")));\n    })));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/Bec/Coding/Bliss-Application/src/Views/Home/index.jsx"],"names":["React","Component","Link","health","healthCheck","list","listQuestions","Question","Home","constructor","state","serverChecking","serverHealthy","questions","question","search","componentDidMount","props","location","split","slice","join","setState","status","listKeysAdded","map","val","key","id","error","console","log","render","ans","route","thumb_url","updateSearch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { health as healthCheck } from \"../../Services/api\";\nimport { list as listQuestions } from \"../../Services/api\";\nimport Question from \"../../Components/Single\";\n\nclass Home extends Component {\n  constructor() {\n    super();\n    this.state = {\n      serverChecking: true,\n      serverHealthy: false,\n      questions: [],\n      question: [],\n      search: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    const search = this.props.location.search\n      .split(\"\")\n      .slice(1)\n      .join(\"\");\n    this.setState({\n      search: search\n    });\n    try {\n      const health = await healthCheck();\n      if (health.status === \"OK\") {\n        const list = await listQuestions(this.state.search);\n        const listKeysAdded = list.map(val => {\n          val.key = val.id;\n          return val;\n        });\n        this.setState({\n          serverChecking: false,\n          serverHealthy: true,\n          questions: listKeysAdded\n        });\n      } else {\n        this.setState({\n          serverChecking: false\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      console.log(\"Error in service.\");\n    }\n  }\n\n  render() {\n    console.log(this.state.serverChecking);\n    console.log(this.state.serverHealthy);\n    console.log(\"Questions\", this.state.questions);\n    const questions = this.state.questions;\n    console.log(\"search\", this.state.search);\n    const ans = this.state.search.split(\"=\");\n    const route = !ans[1] ? \"main\" : ans[1];\n    console.log(\"route\", ans, route);\n\n    return (\n      <div>\n        <h1>list</h1>\n        {this.state.serverChecking && <h3>Checking Server Health</h3>}\n        {this.state.serverHealthy && (\n          <div>\n            {questions.map(val => {\n              return (\n                <div>\n                  <img src={val.thumb_url} />\n                  <p>\n                    {val.id}. {val.question}\n                  </p>\n                  <button onClick = {this.updateSearch(val)}>\n                  <Link to={`/questions?question_id=${val.id}`}>\n                    See details\n                  </Link>\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}