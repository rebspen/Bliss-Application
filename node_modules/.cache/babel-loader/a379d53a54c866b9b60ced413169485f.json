{"ast":null,"code":"var _jsxFileName = \"/Users/Bec/Coding/Bliss-Application/src/Views/Home/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { health as healthCheck } from \"../../Services/api\";\nimport { list as listQuestions } from \"../../Services/api\";\nimport Question from \"../../Components/Single\";\n\nclass Home extends Component {\n  constructor() {\n    super();\n    this.state = {\n      serverChecking: true,\n      serverHealthy: false,\n      questions: [],\n      question: [],\n      search: \"\",\n      multiple: true,\n      single: false\n    };\n    this.updateSearch = this.updateSearch.bind(this);\n  }\n\n  async componentDidMount() {\n    const search = this.props.location.search.split(\"\").slice(1).join(\"\");\n    console.log(\"here\", typeof search);\n    if (parseInt()) this.setState({\n      search: search\n    });\n\n    try {\n      const health = await healthCheck();\n\n      if (health.status === \"OK\") {\n        const list = await listQuestions(this.state.search);\n        const listKeysAdded = list.map(val => {\n          val.key = val.id;\n          return val;\n        });\n        this.setState({\n          serverChecking: false,\n          serverHealthy: true,\n          questions: listKeysAdded\n        });\n      } else {\n        this.setState({\n          serverChecking: false\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      console.log(\"Error in service.\");\n    }\n  }\n\n  async updateSearch(id) {\n    const search = \"question_id=\" + id.toString();\n    this.setState({\n      search: search\n    });\n\n    try {\n      const list = await listQuestions(this.state.search);\n      const listKeysAdded = list.map(val => {\n        val.key = val.id;\n        return val;\n      });\n      this.setState({\n        questions: listKeysAdded\n      });\n      console.log(\"got the new questions\");\n    } catch (error) {\n      console.log(error);\n      console.log(\"Error in service.\");\n    }\n  }\n\n  render() {\n    const questions = this.state.questions;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"list\"), this.state.serverChecking && React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Checking Server Health\"), this.state.serverHealthy && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, questions.map(val => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: val.thumb_url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, val.id, \". \", val.question), React.createElement(\"button\", {\n        onClick: () => this.updateSearch(val.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: `/questions?question_id=${val.id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"See details\")));\n    })));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/Bec/Coding/Bliss-Application/src/Views/Home/index.jsx"],"names":["React","Component","Link","health","healthCheck","list","listQuestions","Question","Home","constructor","state","serverChecking","serverHealthy","questions","question","search","multiple","single","updateSearch","bind","componentDidMount","props","location","split","slice","join","console","log","parseInt","setState","status","listKeysAdded","map","val","key","id","error","toString","render","thumb_url"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { health as healthCheck } from \"../../Services/api\";\nimport { list as listQuestions } from \"../../Services/api\";\nimport Question from \"../../Components/Single\";\n\nclass Home extends Component {\n  constructor() {\n    super();\n    this.state = {\n      serverChecking: true,\n      serverHealthy: false,\n      questions: [],\n      question: [],\n      search: \"\",\n      multiple: true,\n      single: false,\n    };\n    this.updateSearch = this.updateSearch.bind(this);\n  }\n\n  async componentDidMount() {\n    const search = this.props.location.search\n      .split(\"\")\n      .slice(1)\n      .join(\"\");\n      console.log(\"here\" , typeof search)\n      if(parseInt())\n    this.setState({\n      search: search\n    });\n    try {\n      const health = await healthCheck();\n      if (health.status === \"OK\") {\n        const list = await listQuestions(this.state.search);\n        const listKeysAdded = list.map(val => {\n          val.key = val.id;\n          return val;\n        });\n        this.setState({\n          serverChecking: false,\n          serverHealthy: true,\n          questions: listKeysAdded\n        });\n      } else {\n        this.setState({\n          serverChecking: false\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      console.log(\"Error in service.\");\n    }\n  }\n\n  async updateSearch(id) {\n    const search = \"question_id=\" + id.toString();\n    this.setState({\n      search: search\n    });\n    try {\n      const list = await listQuestions(this.state.search);\n      const listKeysAdded = list.map(val => {\n        val.key = val.id;\n        return val;\n      });\n      this.setState({\n        questions: listKeysAdded\n      });\n      console.log(\"got the new questions\")\n    } catch (error) {\n      console.log(error);\n      console.log(\"Error in service.\");\n    }\n  }\n\n  render() {\n  \n    const questions = this.state.questions;\n    return (\n      <div>\n        <h1>list</h1>\n        {this.state.serverChecking && <h3>Checking Server Health</h3>}\n        {this.state.serverHealthy && (\n          <div>\n            {questions.map(val => {\n              return (\n                <div>\n                  <img src={val.thumb_url} />\n                  <p>\n                    {val.id}. {val.question}\n                  </p>\n                  <button onClick={() => this.updateSearch(val.id)}>\n                    <Link to={`/questions?question_id=${val.id}`}>\n                      See details\n                    </Link>\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}